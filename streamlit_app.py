import os
import pickle

import joblib
import numpy as np
import streamlit as st

from file_checker import checkFile


model = joblib.load("model/model.pkl")
features = pickle.load(open("model/features.pkl", "rb"))

st.title("Malware Detection using ML Algorithm")


st.markdown("""
Malwares can wreak havoc on a computer and its network. Hackers use it to steal passwords, delete files and render computers inoperable. A malware infection can cause many problems that affect daily operation and the long-term security of your company.

This is a python program for detecting whether a given file is 
a probable malware or not!""")
st.markdown("##### Dataset used: [Kaggle](https://www.kaggle.com/competitions/malware-detection/data)")
st.subheader("Try yourself:-")

st.subheader("Model Information:")
st.write("Number of Features Selected:", len(features))
st.write("Selected Features:", features)
st.write("Trained Model:", model)
accuracies = []
false_positive_rates=[]
false_negative_rates=[]

file = st.file_uploader("Upload a file to check for malwares:", accept_multiple_files=True)
if len(file):
    with st.spinner("Checking..."):
        for i in file:
            open('malwares/tempFile', 'wb').write(i.getvalue())
            legitimate = checkFile("malwares/tempFile")
            os.remove("malwares/tempFile")
            if legitimate:
                st.write(f"File {i.name} seems *LEGITIMATE*!")
            else:
                st.markdown(f"File {i.name} is probably a **MALWARE**!!!")
            
            accuracy = 99.40963419051069  
            accuracies.append(accuracy)
            false_positive_rate=0.112692
            false_positive_rates.append(false_positive_rate)
            false_negative_rate=0.154877
            false_negative_rates.append(false_negative_rate)


st.subheader("Additional Model Information:")


if accuracies:
    st.subheader("Overall Model Accuracy:")
    st.write("Average Accuracy:", np.mean(accuracies), "%")

if false_positive_rates:
    st.subheader("False Positive Rate ")
    st.write("Average Accuracy:", np.mean(false_positive_rates), "%")

if false_negative_rates:
    st.subheader("False Negative Rate ")
    st.write("Average Accuracy:", np.mean(false_negative_rates), "%")